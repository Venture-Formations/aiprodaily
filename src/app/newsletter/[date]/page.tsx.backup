import { Metadata } from 'next'
import { notFound } from 'next/navigation'
import Link from 'next/link'
import { newsletterArchiver } from '@/lib/newsletter-archiver'
import type { ArchivedNewsletter } from '@/types/database'

interface PageProps {
  params: Promise<{ date: string }>
}

export async function generateMetadata({ params }: PageProps): Promise<Metadata> {
  const { date } = await params
  const newsletter = await newsletterArchiver.getArchivedNewsletter(date)

  if (!newsletter) {
    return {
      title: 'Newsletter Not Found'
    }
  }

  return {
    title: `${newsletter.subject_line} - St. Cloud Scoop`,
    description: `St. Cloud Scoop newsletter from ${new Date(newsletter.campaign_date).toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}`,
    openGraph: {
      title: newsletter.subject_line,
      description: `St. Cloud Scoop newsletter from ${new Date(newsletter.campaign_date).toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}`,
      type: 'article',
      publishedTime: newsletter.send_date,
    }
  }
}

export default async function NewsletterPage({ params }: PageProps) {
  const { date } = await params
  const newsletter = await newsletterArchiver.getArchivedNewsletter(date)

  if (!newsletter) {
    notFound()
  }

  const formattedDate = new Date(newsletter.campaign_date).toLocaleDateString('en-US', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  })

  const articles = newsletter.articles || []
  const events = newsletter.events || []

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white border-b border-gray-200">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <Link
            href="/newsletter"
            className="text-sm text-blue-600 hover:text-blue-800 mb-2 inline-block"
          >
            ← Back to Newsletter Archive
          </Link>
          <h1 className="text-4xl font-bold text-gray-900 mt-2">
            {newsletter.subject_line}
          </h1>
          <p className="text-lg text-gray-600 mt-2">{formattedDate}</p>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Primary Articles */}
        {articles.length > 0 && (
          <section className="bg-white rounded-lg shadow-sm p-8 mb-8">
            <h2 className="text-2xl font-bold text-gray-900 mb-6">Top Stories</h2>
            <div className="space-y-8">
              {articles.map((article: any, index: number) => (
                <article key={article.id} className="border-b border-gray-200 last:border-0 pb-8 last:pb-0">
                  {/* Article number badge */}
                  <div className="flex items-start gap-4">
                    <div className="flex-shrink-0 w-8 h-8 bg-blue-600 text-white rounded-full flex items-center justify-center font-bold text-sm">
                      {index + 1}
                    </div>
                    <div className="flex-1">
                      {/* Headline */}
                      <h3 className="text-2xl font-bold text-gray-900 mb-3">
                        {article.headline}
                      </h3>

                      {/* Article content */}
                      <div className="prose prose-lg max-w-none text-gray-700 leading-relaxed mb-4">
                        {article.content}
                      </div>

                      {/* Source link */}
                      {article.rss_post?.source_url && (
                        <a
                          href={article.rss_post.source_url}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-blue-600 hover:text-blue-800 text-sm font-medium inline-flex items-center gap-1"
                        >
                          Read full story
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                          </svg>
                        </a>
                      )}

                      {/* Metadata */}
                      {article.rss_post?.author && (
                        <p className="text-sm text-gray-500 mt-2">
                          By {article.rss_post.author}
                        </p>
                      )}
                    </div>
                  </div>
                </article>
              ))}
            </div>
          </section>
        )}

        {/* Events Section */}
        {events.length > 0 && (
          <section className="bg-white rounded-lg shadow-sm p-8 mb-8">
            <h2 className="text-2xl font-bold text-gray-900 mb-6">Local Events</h2>
            <div className="grid gap-6 md:grid-cols-2">
              {events.map((event: any) => (
                <div
                  key={event.id}
                  className={`border rounded-lg p-4 ${event.is_featured ? 'border-blue-500 bg-blue-50' : 'border-gray-200'}`}
                >
                  {event.is_featured && (
                    <span className="inline-block bg-blue-600 text-white text-xs font-semibold px-2 py-1 rounded mb-2">
                      FEATURED
                    </span>
                  )}

                  <h3 className="font-bold text-lg text-gray-900 mb-2">
                    {event.title}
                  </h3>

                  {event.event_summary && (
                    <p className="text-gray-700 text-sm mb-3">
                      {event.event_summary}
                    </p>
                  )}

                  <div className="space-y-1 text-sm text-gray-600">
                    {event.start_date && (
                      <div className="flex items-center gap-2">
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                        <span>
                          {new Date(event.start_date).toLocaleDateString('en-US', {
                            weekday: 'short',
                            month: 'short',
                            day: 'numeric'
                          })}
                        </span>
                      </div>
                    )}

                    {event.venue && (
                      <div className="flex items-center gap-2">
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                        </svg>
                        <span>{event.venue}</span>
                      </div>
                    )}
                  </div>

                  {event.event_url && (
                    <a
                      href={event.event_url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="mt-3 inline-block text-blue-600 hover:text-blue-800 text-sm font-medium"
                    >
                      Event Details →
                    </a>
                  )}
                </div>
              ))}
            </div>
          </section>
        )}

        {/* Road Work Section */}
        {newsletter.sections?.road_work && (
          <section className="bg-white rounded-lg shadow-sm p-8 mb-8">
            <h2 className="text-2xl font-bold text-gray-900 mb-6">Road Work & Closures</h2>
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
              {newsletter.sections.road_work.items?.map((item: any, index: number) => (
                <div key={index} className="border border-orange-200 bg-orange-50 rounded-lg p-4">
                  <h3 className="font-bold text-gray-900 mb-2">{item.road_name}</h3>
                  {item.road_range && (
                    <p className="text-sm text-gray-700 mb-2">{item.road_range}</p>
                  )}
                  {item.city_or_township && (
                    <p className="text-sm text-gray-600 mb-2">{item.city_or_township}</p>
                  )}
                  {item.reason && (
                    <p className="text-sm text-gray-700 mb-2">{item.reason}</p>
                  )}
                  <div className="text-xs text-gray-600 mt-2 space-y-1">
                    {item.start_date && <div>Started: {item.start_date}</div>}
                    {item.expected_reopen && <div>Reopens: {item.expected_reopen}</div>}
                  </div>
                </div>
              ))}
            </div>
          </section>
        )}

        {/* Footer */}
        <div className="text-center py-8 border-t border-gray-200">
          <p className="text-gray-600 mb-4">
            This is an archived edition of the St. Cloud Scoop newsletter.
          </p>
          <div className="flex justify-center gap-6">
            <Link
              href="/newsletter"
              className="text-blue-600 hover:text-blue-800 font-medium"
            >
              View All Newsletters
            </Link>
            <Link
              href="/"
              className="text-blue-600 hover:text-blue-800 font-medium"
            >
              Subscribe Today
            </Link>
          </div>
        </div>
      </main>
    </div>
  )
}
